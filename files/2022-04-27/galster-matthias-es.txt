Creo que mi charla será un poco diferente en comparación con las otras charlas porque no voy a hablar de un proyecto de investigación en particular. El contenido de mi charla se basa en un número especial que un par de colegas míos y yo publicamos el año pasado y que trataba sobre el valor y el gasto en la ingeniería del software. Así que en esta charla voy a presentar algunas de las investigaciones presentadas en los artículos y también intentaré explicar por qué debería importarnos. Creo que me mencionaré conceptos de alto nivel, pero incluyo una URL aquí para que si te interesa los detalles del trabajo que voy a presentar puedas ir a la URL y todos los documentos - no deben estar detrás de un pay wall para que puedas leer y entrar en las consultas técnicas reales de las investigaciones reales. Si no recuerdas la URL, también la he incluido en la nota a pie de la página por si quieres consultarla. Bien, pero cuál es el panorama general, cuál es la motivación de mi charla. Tenemos valor y gasto, pero en la práctica puede ser un reto pensar en el valor y en el gasto y pensar en cómo podemos reducir el gasto o cómo podemos aumentar el valor si no tenemos una conceptualización de estos términos de estas ideas. Así que esto es lo que quiero hacer: pensar en cómo podemos conceptualizar el gasto, cómo podemos reconceptualizar el valor y luego utilizar estas definiciones más concretas para abordar de forma proactiva el valor y el gasto en el desarrollo. Para empezar, un artículo que no aparece en este número especial, pero que creo que sigue siendo relevante, es un artículo que presenta algunas investigaciones que analizan lo que realmente es el gasto y para cada una de las conclusiones presento también en la parte inferior la fuente de la evidencia, por lo que si te preguntas cuál es el espacio de lo que voy a hablar, hay un breve resumen en los cuadros azules en la parte inferior de cada diapositiva. Así que hubo un estudio que analizó, bueno, lo que es el gasto y llegó a una definición de los desperdicios en la ingeniería de software y también nueve categorías de gasto incluyendo su causa. Así que por qué tenemos los tipos de gastos y me referiré a algunos de estos tipos más adelante. Pero bueno, te preguntarás, ¿cuál es el punto de saber esto? Bueno, si conocemos estos puntos o si conoces estos tipos de gasto podemos hablar de ellos con nuestro equipo, podemos abordarlos activamente y tal vez considerarlos en nuestra planificación en nuestros proyectos en la forma en que diseñamos y desarrollamos el software. Así que vamos a echar un vistazo a la primera cuestión relacionada con los gastos. Así que las revisiones de código, creo que se han escrito muchas cosas sobre las revisiones de código un montón de blogs por ahí un montón de gente tiene opiniones sobre las revisiones de código y creo que habrá algunas más charlas también en el contexto de esta serie de charlas sobre las revisiones de código. Así que en realidad ya sabemos mucho acerca de las revisiones de código, así que lo que me gustaría destacar en el contexto de los gastos es que las malas revisiones de código puede ser una fuente de gasto y para hacer frente a esto o para mitigar o reducir el gasto en el contexto de las revisiones de código, bueno, podemos ver que hace una mala revisión de código. 
Y hay una gran cantidad de evidencias empíricas sobre lo que se clasifica como una mala revisión de código y así este estudio, se identificaron los llamados olores de revisión, por ejemplo, la falta de revisión o "me parece bien", lo que significa que quienes revisan, no revisaron realmente el código en primer lugar, o que sólo revisaron superficialmente, lo que podría conducir a un gasto de retrabajo, que luego tenemos que volver a trabajar lo que habíamos hecho en el diseño del código. Las revisiones de amigos es otro olor de revisión que significa que simplemente pedimos a personas amigas que revisen nuestro código, tal vez sólo las personas que trabajan en las mismas partes del código, por lo que no hay realmente un intercambio de conocimientos o la revisión del código no ayuda realmente a compartir el conocimiento con un equipo. Hay otras revisiones como el ping pong, que lleva a una comunicación ineficaz cuando el revisor y el autor del código van de un lado a otro para discutir el código. O dormir, que es un olor interesante, lo que significa que las personas que revisan ni siquiera responden, así que es otra fuente de gasto porque tenemos que esperar, así que el desarrollador que escribió el código tiene que esperar hasta que la revisión regrese y los dos olores restantes serían, bueno, tenemos grandes conjuntos de cambios por lo que, por ejemplo, la cantidad de cambios en el código que tenemos que revisar es muy grande o simplemente hemos perdido el contexto del cambio que se acaba de hacer en el código que vamos a revisar, lo que podría conducir a una carga cognitiva muy alta y, de nuevo, al final probablemente una pérdida de tiempo a largo plazo. Ahora, de nuevo, la pregunta es ¿por qué importa esto? Bueno, si somos conscientes de este tipo de olores podemos planificar nuestras actividades de revisión - podemos comunicar las expectativas para las revisiones de código e incluso podemos utilizar estos anti-patrones u olores de las revisiones para formar a los nuevos revisores en nuestra organización. 
Bien, sigamos con el nivel de código, otra forma de desperdicio que creo es la deuda técnica, y de nuevo se ha escrito mucho sobre la deuda técnica, pero una pregunta que a menudo, o en realidad creo que siempre surge, es, bueno, ¿qué es lo que realmente arreglamos? ¿Cómo lo arreglamos y quién debería arreglarlo?  
Bueno, esta contribución a este número especial que publicamos descubrió que no todos los tipos de deuda técnica se arreglan de la misma manera y que algunos tipos de deuda técnica son arreglados por quienes los introducen y algunos tipos son arreglados por otras personas y algunos tipos de deuda técnica que tal vez nunca se arreglan, ¿qué podemos hacer con esto? Bueno, si sabemos que algunos tipos es menos probales que se arreglen solos. Por ejemplo, la deuda de diseño, probablemente tenemos que llegar a las actividades dedicadas o tal vez dedicar tiempo en nuestro desarrollo para arreglar estos tipos de deuda técnica. En el caso de otros tipos de deuda, por ejemplo la deuda de código o la deuda de defectos, a menudo es el desarrollador quien la introduce y la corrige. Por lo tanto, para estos tipos de deuda, es posible que no planifiquemos iniciativas o actividades de reparación. También, bueno, lo que podemos sacar de esto es que cuando se trata de tipos de deuda técnica que no son auto-arregladas probablemente necesitamos asignarlas a personas - a personas dedicadas - y esta investigación argumenta que la deuda de diseño, por ejemplo, probablemente deberíamos asignarla a personas de mayor rango porque aquellos que introducen la deuda de diseño, si son juniors, a menudo no están realmente interesados en arreglarla en primer lugar. 
Bien, estos eran dos ejemplos y el último, el tercero y último, es algo diferente y se centra en el valor, pero lo hace desde una perspectiva diferente. No se trata de valor en términos de dinero o valor en términos de funcionalidades o valor en términos de tiempo que ahorramos sino que es valor en términos de valores humanos y la pregunta es cómo podemos integrar los valores humanos en el software porque como profesionales responsables o como desarrolladores de software no sólo debemos asegurarnos de que construimos software que es útil para nuestros clientes sino que también debemos construir sistemas que apoyen o al menos no violen los valores humanos. Ahora bien, hay mucha literatura sobre valores humanos y taxonomías, definiciones, pero puede ser bastante difícil para un ingeniero o desarrollador de software entender, bueno, ¿cómo traduzco los valores humanos en algo que podamos representar en el código? Y aquí es donde entra esta contribución - este documento en la parte inferior - porque lo que este documento trató de hacer es, bueno, miró cómo los valores humanos se discuten entre los desarrolladores de proyectos de software y luego trató de llegar a las descripciones conceptualizadas de estos valores humanos para que sean más procesables u operacionales - puede ser operacional por los ingenieros de software. Para dar un ejemplo de dos valores humanos - quiero decir, hay más - sólo pongo dos ejemplos aquí, la dignidad y la inclusión. Podrían ser conceptualizados, por ejemplo, en la dignidad para mantener el honor y el respeto a los usuarios, y una vez que tenemos esa descripción contextualizada de ese valor humano, podemos ir un paso más allá y definir los requisitos reales. Así, por ejemplo, basándonos en esta descripción, podríamos pensar en qué tipo de información del usuario guardamos en nuestra aplicación, cómo se comparte, cómo pueden los usuarios darse de baja, si los usuarios son propietarios, por ejemplo, de su información, de modo que este concepto de alto nivel, quizá abstracto, de "dignidad", que se relaciona con el valor humano, se convierte en algo mucho más concreto. Y lo mismo ocurre con la inclusión: lo que la investigación descubrió es que podemos traducir la inclusión en la posibilidad de facilitar diferentes idiomas de origen, culturas y conocimientos y, a partir de ahí, podemos dar un paso más para llegar a los requisitos o restricciones completos de nuestro software. 
Bueno, eso es todo lo que quería decir, sólo para resumir, ya sabemos mucho sobre el valor y las pérdidas y en esta charla sólo quería dar algunos ejemplos y, bueno, ¿cuáles son las conclusiones? Bien, sabemos mucho sobre los olores de las revisiones, así que ¿por qué no usamos ese conocimiento para planificar nuestras revisiones, para formar a los desarrolladores novatos o para comunicar las expectativas sobre las revisiones dentro de nuestra organización? En cuanto a la deuda técnica, podemos utilizar nuestros conocimientos empíricos sobre la deuda técnica para decidir cómo solucionarla y decidir en qué tipo de actividades nos centramos. Así que, por ejemplo, si por alguna razón quisiéramos tener... quisiéramos dedicar un día o dos a arreglar la deuda técnica, probablemente sea mejor dedicarlo a arreglar el diseño que a arreglar la deuda de código, porque la deuda de código tiende a ser bien arreglada por los desarrolladores. Y por último, pero no por ello menos importante, cuando se trata de valores humanos, bueno, ahora tenemos una descripción contextualizada de los valores humanos y podemos usarla para identificar requisitos más concretos del producto y al final construir un software responsable. 
Sí, así que si tienen alguna pregunta no duden en enviarme un correo electrónico o si quieren saber más no duden en enviar un correo electrónico o simplemente dejar una pregunta a Mike, y, sí, eso es todo lo que tenía por hoy.
