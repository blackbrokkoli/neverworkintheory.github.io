Hoy me gustaría contarles lo que hemos descubierto sobre la eficacia de la revisión del código mediante una investigación empírica de ingeniería del software. Espero poder inspirar tu práctica. Así que primero voy a decirte que consideramos como revisión de código. En este caso me refiero a la forma más extendida de revisión de código, en la que básicamente una persona que desarrolla trabaja en un sistema de software y realiza algunos cambios que luego envía a una o más personas revisoras. Estas personas revisoras inspeccionan el cambio, hacen algunos comentarios, y los envían de vuelta a la persona autora y esto crea el ciclo de revisión de código que continúa hasta que todo el mundo está de acuerdo con el cambio y el cambio se integra en el código base. Así que en lo que nos centramos hoy es en cómo podemos hacer esta parte -la revisión real del código- más efectiva para que quienes desarrollan software encuentren, por ejemplo, más errores.
Bueno, no sé si estoy predicando al coro, pero la revisión de código es tan utilizada que cualquier mejora en la práctica puede tener efectos importantes, después de todo estamos hablando de encontrar errores antes de que lleguen a producción. Bien, así que en primer lugar, me gustaría pedirte que dieras un vistazo a estas herramientas ejemplares de revisión de código. Todas son muy similares, cierto, todas son muy parecidas entre sí, pero permítanme llamar su atención sobre un aspecto. Por favor, miren la lista de archivos que están bajo revisión. Cuál es su orden, ¿verdad? Bueno más precisamente alfabético y como desarrolladores/as entendemos por qué llegaron a esa implementación específica. Pero la pregunta es ¿podría esta elección tener un efecto en la revisión de código? Instrumentando una herramienta de revisión de código en una empresa descubrimos que el comportamiento de quien revisa está influenciado por esto. Así, en más del 50 por ciento de las revisiones que analizamos, quien revisa comenzó con el archivo presentado en primer lugar, y en casi el 40 por ciento de la navegación en la revisión - la persona que revisa fue al siguiente archivo en el orden. Bueno, esto no es un problema, ¿verdad?, porque los nombres de los paquetes son algo aleatorio, por lo que están ordenados al azar. Bueno, excepto cuando no lo están. Los archivos de prueba están casi siempre después de los archivos de producción que prueban. ¿Podría ser esto un problema? Si juntamos esto con el hecho de que quienes desarrollan consideran que los archivos de prueba son menos importantes, pues tal vez. De hecho, hemos examinado los datos de revisión del código y hemos descubierto que las pruebas se comentan mucho menos. Pero esto podría ser el resultado del sesgo hacia las pruebas. ¿Qué pasaría si la herramienta utilizara un orden diferente? Así que hicimos un experimento para comprobarlo. Configuramos una herramienta de revisión de código en línea y pedimos a los/as desarrolladores/as que revisaran algo de código. Teníamos dos archivos, uno de producción y otro de prueba, en los que pusimos algunos errores. Entonces decidimos que estos/as desarrolladores/as formaran dos grupos. A un grupo se le presentó primero el archivo de producción y al otro grupo el archivo de prueba. Luego observamos su capacidad para encontrar errores. En lo que respecta a los errores en producción, no hubo diferencias entre los grupos, pero el grupo al que se le presentó primero el archivo de prueba tuvo un 250% más de probabilidades de encontrar el error en la prueba. Simplemente modificando el orden -cambiando el orden- en el que miraban estos archivos.
Este es un resultado interesante si te importan los archivos de prueba, y deberíamos, cierto, porque nos ayudan a encontrar errores en producción. Sin embargo, podría ser que lo que vemos es que este orden va en contra del prejuicio que tenemos sobre los archivos de prueba. Así que es sólo una manera de contrarrestar este sesgo inicial. Pero este efecto puede o no existir para el código de producción. Tal vez no. Así que investigamos eso también.
Lo primero que hicimos fue analizar los comentarios de revisión de doscientas mil pull requests de proyectos muy populares en GitHub y encontramos algo muy notable. Miren esto: si tomamos el número de comentarios que se ponen en una revisión por posición de archivo - digamos que tomas todos los pull requests con cinco archivos y sumas todos los comentarios que reciben a través de todos estos pull requests con cinco archivos - esto es lo que ves. Los archivos en las primeras posiciones reciben significativamente más comentarios que los archivos en las últimas posiciones. Y, por supuesto, también lo comprobamos manualmente. Tal vez hagas un comentario al principio y digas arregla esto en todos los otros archivos también, pero esto sucede muy, muy raramente, así que estos son comentarios originales que no tienen mucho que ver entre sí y así es como se ven. Y aún más notable es que esto es cierto en todos los casos diferentes. Como puedes ver en estos gráficos para dos, cinco, cuatro, por pull request, con dos archivos, con siete archivos, diez archivos, ya se ve esta tendencia.
Bueno, pero estos son comentarios, ¿verdad?, la mayoría no son sobre errores. Lo sabemos porque hacemos revisiones de código. Así que tal vez no es un efecto importante. Para probar, lo que hicimos fue otro experimento donde realmente queríamos ver si había tal efecto y si eso era importante para nuestra efectividad. Así que usamos una configuración de línea similar a la anterior, pedimos a las personas que revisara un código y preparamos algunos códigos especiales, creamos cinco archivos de producción e introdujimos errores en dos de ellos, el primero y el último. Los errores son diferentes: uno de ellos es un break que falta, que es similar a un error de sintaxis, así que no se necesita mucha comprensión para ver si falta, si es realmente un problema. El otro en cambio requiere una lectura más cuidadosa de la documentación y tienes que compararlo con la implementación real. Lo llamamos caso de borde, esto es un error de límite, muy común, pero requiere una mayor comprensión.
Así que asignamos los archivos ordenados de forma diferente a las personas desarrolladoras: uno tenía este orden y el otro grupo tenía el orden invertido. Y comparamos cómo les fue en la búsqueda de esos errores. Cuando hablo de orden significa que es una revisión normal, pero ordenamos los archivos uno tras otro de forma diferente, de modo que el primer grupo ve primero el archivo A y el segundo ve primero el archivo B. Así que comparamos los resultados: para el error simple de sintaxis no había ninguna diferencia en los dos grupos - tenían la misma probabilidad de encontrar los errores, independientemente de si era el primero o el último en la lista de archivos. En cambio, para el caso borde, el grupo que lo recibió en el primer archivo presentado tenía un 175% más de probabilidades de encontrar el error en comparación con el otro grupo. Este era el fallo que requería más atención y comprensión.
Bien, permítanme dar un paso atrás para analizar esto. Entonces, buscamos una manera de mejorar la eficacia en la revisión de código. Consideramos las herramientas que se utilizan en el mundo real y prestamos atención a cómo se ordenaron los archivos. Encontramos primero, datos interesantes sobre los test, y haciendo un experimento, vimos que tener un test más adelante tiene un efecto que no se puede contrarrestar. Moverlos primero no tiene mayores efectos secundarios y sí muchos beneficios. Luego nos trasladamos a los archivos de producción y encontramos un patrón notable en el número de comentarios, y en base a esto, ejecutamos un experimento, y aquí también el efecto de la posición de los archivos - la forma en que se ven los archivos en una revisión de código - es importante para la eficacia de la revisión de código.
Creo que podemos sacar algo útil para nuestra práctica de estos resultados. Por ejemplo, quienes revisan, perdón, quienes revisan deberían ser conscientes de este efecto y decidir por dónde empezar la revisión de una manera basada en criterios, mirándola desde una perspectiva de alto nivel y entendiendo por dónde empezar. Las personas autoras pueden guiar a quienes revisan hacia las partes más difíciles de su cambio. Después de todo, ellos hicieron los cambios, es su cambio, muy bien, pueden detallarlo en el mensaje de descripción o añadir comentarios de revisión para guiar a las personas que revisan. Y quienes fabrican herramientas deberían realmente tratar de empoderar a los/as usuarios/as para que elijan cómo ordenar sus cambios, y también ofrecer otras características que reflejen el hecho de que la configuración por defecto que tenemos en nuestras herramientas, tiene un poder muy fuerte en lo que hacemos. Esto es después de todo sobre el poder de la configuración por defecto en la eficacia de la revisión de código.
Así que gracias por su atención. Me gustaría agradecer a mis estudiantes y colaboradores/as de mi grupo de investigación que hicieron posible este trabajo. Este fue un trabajo realizado a lo largo de varios años, hacemos mucho trabajo en esta línea, tratamos de entender a las personas que desarrollan software, su trabajo, y encontrar formas en las que se puede mejorar, formas de criterio y posiblemente con soluciones simples como estas. Así que si estás interesado en saber más por favor ponte en contacto. Muchas gracias.