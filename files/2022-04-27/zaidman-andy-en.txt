programmer by day tester by night um what do i really mean by that well uh having looked at the presentations that came before me i think there is a very logical connection to what some of the people that are working on testing we're seeing like magicio and manuel uh but also to what igor was just saying about estimation so uh let's dive into the kitchen because um actually well if my slides would move i actually like to use uh the kitchen as a parallel universe to the programming universe that we're typically working in as developers so personally i really love cooking and i like to make intricate dishes um and and put them on the table but as you can imagine this part of the work in the kitchen i don't typically like that much and i think a lot of people would agree with me that this is really what you try to delay as much as possible and well maybe you have a dishwasher and it's not too bad but well it's definitely not my favorite part of the job so if i were to ask you how much time does making this beautiful dish really cost and maybe somebody would say 30 minutes and if i were to ask how much time you would spend on doing the dishes that would probably be considerably longer than it takes you to cook so from that point of view there is a message coming in so i'm just going to see whether that's something for me no um so from that perspective we've been looking at how people perceive the time taken to do tasks that you enjoy versus tasks that you might not enjoy so much there's actually a term for that that's chronoception but also it's it's kind of the shortened form of the chrono perception the time it takes to do something

and what we were really wondering in the studies that we've done is how do people look at software testing and how much time are they spending on software testing so my slides move we actually did we created a tool a plug-in for some popular development environments we unleashed that on 2442 developers or from many countries but the key thing is that by having this tool installed for several months we were able to collect 150 person years of development during the study so this gives us a broad basis to really look at how people are doing testing now uh during the installation we had this fantasy wizard and we were asking people do you do testing do you do that in the ide do you do other types of testing any other opinions that people might have on testing so one of the key questions was how much time do you think you're spending time on engineering test code versus engineering what we call production code in the ide and the answers the average answer over all the 2443 developers that installed the tool was about 50 50. so 49.5 percent of their time was spent on engineering test code and 50.5 was spent on engineering production code now there is something really strange going on here because there is this really famous book the mythical man month from frederick brooks and in that book it's written that testing takes approximately 50 of our time so it's actually very strange that the book from that was published at the end of the 1970s actually premonitioned the results of this first question in our study so maybe there is actually some folklore going on in our profession now the key question obviously is that after observing these developers after minimally five months and potentially even two years or more what would be the answer how much time would actually be spent on engineering test code that is dramatically different from the estimations one quarter of their time of these developers was spent on engineering test code in the ide and 75 was spent on engineering the production code why is that uh well these remain assumptions um but the fact that software testing is really a destructive activity while engineering production code is actually something that you bring to life something that you probably enjoy more just like the cooking versus doing the dishes could be a reason here why people overestimate their testing efforts but there is more to this study because we also looked at how people do test driven development and this really touches upon what davide was telling a few presentations before so i think we all know what test driven development is it's the core idea that you write your tests first and then uh implement parts of the production code so that your tests pass and this really requires this cycle where you have a failing test you make it past the refactor and you continue doing that so from the 574 developers which is like just under 20 of the developers in our study that claimed to do tdd were actually only 47 that really did tdd now you can say well maybe they did it outside of the observation observation period that could all well be but i think the key message here is that a lot of people think they do it but in practice they don't do it that often because even for those developers that we did observe that they were doing tdd they only did it in very specific cases probably because it's not that easy to do

so what does that really bring us to well the first takeaway is what developers think they do or they estimate their efforts on is typically not what they really do in practice so the chronoception of software engineering tasks is really something that we need to be careful for and secondly maybe a plea is that we need to understand software engineering tasks better how we do it and also the effort that it takes to do them and we need to have better tools to estimate how much time does it take to test how much time does it really take to implement the feature so my plea here is really to also use software analytics during developments to better understand what you and your team are doing and also create more reliable estimations

so finally the two takeaways of my talk the chrono perception take into account that certain things take more or less time depending on certain factors in your personality and a general plea to do more software analytics to become a better program thank you
