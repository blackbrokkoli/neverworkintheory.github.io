and so today i am katie and we're going to be talking about my research which is in search but as we are developers we are focusing this on not just any search but code search so code search is a term that i'm using to describe the process of using search in an ide in a browser and another bespoke interface to locate some code related artifact and there are many ways many interfaces that exist for code search the most common by and large is generic google and we've all done it we want some example code we want to know how to use an apis we don't want more information on something code related like an error message so we go straight to google we issue a textual query and we hopefully find the result within the first few results first few and queries there are other types of interfaces that are increasing with sophistication one example is out of the github ecosystem we have a textual query here with various ways you can filter on what you want if you want to commit if you want an issue if you want a discussion and then also ways of filtering based on language apis things like that also out of github in the code search space moving away from the textual query is getting into comment to code query or this is github's copilot or a little bit of code to code search here and then there's also a lot of interfaces that are within ides within specific companies this is one that is similar to say google search code search tool that i've existed several years back so code search it turns out is happening all the time and we did a study of developers at google and it turns out that it was happening 12 times per developer per day and this may not sound like a lot except when i'm talking about 12 times a day i mean search sessions and each not individual query so a search session involves an average of three to four queries a bunch of clicks some navigation many minutes is more than just a single search and so this makes it's taking a lot of time and then when we looked at the google specific tools so you know generic google information search and segmented search logs based on in non-code search and code search turned out code search queries took more time more clicks and required more reformulations which means more effort and when we're looking at things that are taking more effort that means there's an opportunity for improved support in our code search research we found that there are four distinct needs that cropped up as being the most common so i want to talk about these one of them the most common reason developers were searching were how questions how do i use this api may i have some example code that shows me how to do something this is about a third of the searches and we got this information by surveying developers while they were using code search tools the second most common type of question was a what question what is this code doing kind of a comprehension question and this is about a quarter of the time sometimes it can be answered with comments sometimes not where in the code base something is located this is a localization question i got this error message i want to know where it's coming from that's about 16 of the of the searches and then why questions why is something happening was another about 16 so i want to focus here in the beginning on these how questions this is the majority of questions so when you have a how question typically you have some information and you want some information with our current tools co-pilot non-understanding we typically have a textual query or we formulate our question as a textual query but what we really might want is example code another and this is either this is supported well today another method of looking for example code could be to have a function as your query and you want a function as your result this would be a code search this can be useful in education if you're looking for alternate implementations of the same algorithm it can also be useful for learning a new programming language or doing translation here we have an example of translation we have a query in one language and a result and so in order to facilitate code to code search it require especially across languages it requires some language agnostic language independent analysis so ideally there exists a mystery box i would love for this mystery box to exist where input comes in and it's a query and what comes out is code that behaves the same in the same language maybe in another language and actually even more ideally it's not just one result but it's many results so this is what code of code search could look like in an ideal environment where we have multi-language analysis and we are able to say this behavior is the same as this other behavior but to do this precisely we must have guarantees we must guarantee that for any two chunks of code they behave the same and therefore they terminate and so we run into the halting problem so in fact if we want code code search to be precise it'll never work in theory but there is some evidence that it can work in practice so this is what we've been up to in code to code search we have lots of source code at our disposal we've had a lot of talks today on mining github that's where we go to and let's say we have a bunch of snippets and these snippets all exist on github and they have some they have some similarities so there are so there are three languages that are represented here some of these have similar have same behavior others have similar behaviors and under some inputs they behave the same under other inputs they behave differently and then we have other like depending on how you chunk it the behavior can also be the same and then we also have similarity across structure so with all these levels of similarity we are able to draw parallels between different areas of the source code and exploit these similarities to create effective search what we did was we took source code and we indexed it using three different dimensions to create a multi-dimensional similarity analysis we use tokens or context because people can write code with any variable name that they want but it turns out they tend to do it in a pretty natural way and we can use that information we took behavior using fuzzing and we took structure using um a language agnostic ast abstract abstract syntax tree and we combined those all together in a multi-dimensional analysis using non-dominated sorting so given a query we got a bunch of similar code and it was good the results were very high precision it worked exactly as we wanted except in one dimension it was dreadfully slow and and so we needed to go back to the drawing board because it was so slow it wasn't practical well it turns out because people write code in natural way we can take advantage of patterns so when we replace our slow algorithm with something really super fast for machine learning and bettings we have to remove the behavior to behavior piece but it turns out it doesn't matter because what we end up here with is a fast approach to code to code search without a loss of precision and that's because of the patterns that exist in source code source code so code code search is coming and it helps us answer one of these needs it helps us answer questions about how but there are other questions that developers are asking and they are using search to explain what questions where questions and why questions and code search isn't great for all of these needs code search is a hammer and not every one of these questions is a nail so let's look at them one by one so with example code wanting to know how questions this can be done in practice with search you've done it yourself with github with google i've shown you how it can be done with code to code search a new kind of modality of searching if you want to do what if you want to ask answer what questions quarter of the time these are code comprehension questions this isn't search and in fact if you are asking your search engine what your code is doing you're asking it to tell you something about the code tell you a story about the code that might not be true and so you're assuming some risk with that and you are allowing yourself to potentially misunderstand so that's probably not the best question to return to a search engine for where questions in the ide talking about code navigation this is naturally supported but why questions when we're talking about why is the code behaving this way we're talking about causality we're talking about impact analysis and maybe we'll work on causal testing by brittany johnson might be a better approach for those types of questions so because these situations of code search where code search is not necessarily the right tool for the question occurs in 40 of the questions based on the data we studied it's really important to know why you're searching code search happens 12 times a day it takes a lot of time it takes a lot of queries so if you're asking how or where questions code search is your friend if you want to ask a what question what is the code doing you're probably not it's probably not in your best interest to start with the search engine you may be better off phoning a friend looking for pair programming why questions are better rephrased starting with the where which is more naturally answered with the search engine so codes are just not going away there are many there may be many ways in the future to answer these what and why questions with more research so stay tuned for that thank you for listening