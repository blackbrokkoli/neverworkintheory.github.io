So today, I am Katie, and we're going to be talking about my research which is in search, but as we are developers we are focusing this on not just any search but code search.
So code search is a term that I'm using to describe the process of using search in an IDE, in a browser, in another bespoke interface, to locate some code related artifact.
And there are many ways - many interfaces that exist for code search.
The most common by and large is generic Google, and we've all done it.
We want some example code, we want to know how to use an API, we want more information on something code related like an error message, so we go straight to Google, we issue a textual query, and we hopefully find the result within the first few results - first few queries.
There are other types of interfaces that are increasing with sophistication.
One example is out of the GitHub ecosystem, we have a textual query here with various ways - you can filter on what you want, if you want a commit, if you want an issue, if you want a discussion, and then also ways of filtering based on language APIs, things like that.
Also out of GitHub in the code search space moving away from the textual query, is getting into comment to code query, or this is GitHub's Copilot, or a little bit of code to code search here.
And then there's also a lot of interfaces that are within IDEs within specific companies this is one that is similar to, say, Google search - code search tool that existed several years back.
So code search it turns out is happening all the time, and we did a study of developers at Google, and it turns out that it was happening 12 times per developer per day.
And this may not sound like a lot, except when I'm talking about 12 times a day, I mean search sessions, and each - not individual query.
So a search session involves an average of three to four queries, a bunch of clicks, some navigation, many minutes, it's more than just a single search, and so this means it's taking a lot of time.
And then when we looked at the Google-specific tools, so, you know, generic Google information search, and segmented search logs based on non-code search and code search, it turned out code search queries took more time, more clicks, and required more reformulations, which means more effort.
And when we're looking at things that are taking more effort, that means there's an opportunity for improved support.
In our code search research we found that there are four distinct needs that cropped up as being the most common.
So I want to talk about these.
One of them - the most common reason developers were searching - were how questions.
How do I use this API, may I have some example code that shows me how to do something.
This is about a third of the searches.
And we got this information by surveying developers while they were using code search tools.
The second most common type of question was a what question: what is this code doing?
Kind of a comprehension question.
And this is about a quarter of the time.
Sometimes it can be answered with comments, sometimes not.
Where in the code base something is located, this is a localization question, I got this error message I want to know where it's coming from.
That's about 16 percent of the of the searches.
And then why questions: why is something happening was another about 16 percent.
So I want to focus here in the beginning on these how questions, because this is the majority of questions.
So when you have a how question, typically you have some information and you want some information.
With our current tools, Copilot notwithstanding, we typically have a textual query or we formulate our question as a textual query, but what we really might want is example code.
Another - and this is either - this is supported well today.
Another method of looking for example code could be to have a function as your query and you want a function as your result.
This would be a code to code search.
This can be useful in education if you're looking for alternate implementations of the same algorithm.
It can also be useful for learning a new programming language or doing translation.
Here we have an example of translation: we have a query in one language and a result in another.
And so in order to facilitate code to code search, it require - especially across languages - it requires some language agnostic - language independent analysis.
So ideally there exists a mystery box - I would love for this mystery box to exist - where input comes in and it's a query, and what comes out is code that behaves the same, in the same language, maybe in another language, and actually even more ideally it's not just one result, but it's many results.
So this is what code to code search could look like in an ideal environment, where we have multi-language analysis and we are able to say, this behavior is the same as this other behavior.
But to do this precisely we must have guarantees - we must guarantee that for any two chunks of code they behave the same and therefore they terminate.
And so we run into the Halting Problem.
So in fact if we want code to code search to be precise it'll never work in theory, but there is some evidence that it can work in practice.
So this is what we've been up to.
In code to code search, we have lots of source code at our disposal.
We've had a lot of talks today on mining GitHub, that's where we go to.
And let's say we have a bunch of snippets, and these snippets all exist on GitHub, and they have some - they have some similarities - so there are - so there are three languages that are represented here, some of these have similar - have the same behavior, others have similar behaviors, and under some inputs they behave the same, under other inputs they behave differently, and then we have other, like, depending on how you chunk it, the behavior can also be the same.
And then we also have similarity across structure.
So with all these levels of similarity, we are able to draw parallels between different areas of the source code and exploit these similarities to create effective search.
What we did was, we took source code and we indexed it using three different dimensions to create a multi-dimensional similarity analysis.
We use tokens or context because people can write code with any variable name that they want, but it turns out they tend to do it in a pretty natural way, and we can use that information.
We took behavior using fuzzing, and we took structure using a language agnostic AST - abstract - abstract syntax tree.
And we combined those all together in a multi-dimensional analysis using non-dominated sorting, so given a query we got a bunch of similar code, and it was good.
The results were very high precision, it worked exactly as we wanted except in one dimension:
it was dreadfully slow.
And - and so we needed to go back to the drawing board, because it was so slow it wasn't practical.
Well, it turns out because people write code in natural way we can take advantage of patterns.
So when we replace our slow algorithm with something really super fast for machine learning and embeddings,
we have to remove the behavior to behavior piece, but it turns out it doesn't matter, because what we end up here with is a fast approach to code to code search without a loss of precision, and that's because of the patterns that exist in source code - source code.
So code code search is coming and it helps us answer one of these needs - it helps us answer questions about how.
But there are other questions that developers are asking, and they are using search to explain: what questions, where questions, and why questions.
And code search isn't great for all of these needs.
Code search is a hammer and not every one of these questions is a nail.
So let's look at them one by one.
So with example code, wanting to know how questions, this can be done in practice with search - you've done it yourself with GitHub, with Google, I've shown you how it can be done with code to code search - a new kind of modality of searching.
If you want to do what, if you want to ask answer what questions, a quarter of the time these are code comprehension questions, this isn't search.
And in fact if you are asking your search engine what your code is doing, you're asking it to tell you something about the code - tell you a story about the code that might not be true - and so you're assuming some risk with that, and you are allowing yourself to potentially misunderstand, so that's probably not the best question to turn to a search engine for.
Where questions in the IDE, talking about code navigation, this is naturally supported, but why questions: when we're talking about why is the code behaving this way, we're talking about causality, we're talking about impact analysis, and maybe the on causal testing by Brittany Johnson might be a better approach for those types of questions.
So because these situations of code search, where code search is not necessarily the right tool for the question, occurs in 40 percent of the questions based on the data we studied, it's really important to know why you're searching.
Code search happens 12 times a day, it takes a lot of time, it takes a lot of queries, so if you're asking how or where questions code search is your friend.
If you want to ask a what question - what is the code doing - you're probably not - it's probably not in your best interest to start with the search engine.
You may be better off phoning a friend, looking for pair programming.
Why questions are better rephrased starting with the where, which is more naturally answered with the search engine.
So code search i not going away.
There are many - there may be many ways in the future to answer these what and why questions with more research, so stay tuned for that.
Thank you for listening.
