Gracias a Greg y Mike por organizar esta increíble serie de charlas.
Muchas de las cosas que voy a tocar durante los próximos 10 minutos ya se han mencionado en algunas de las charlas anteriores y me gustaría tener más tiempo para tal vez crear más enlaces a las ideas anteriores que se compartieron, pero en los próximos nueve a diez minutos voy a discutir por qué la productividad de los desarrolladores es más complicada de lo que podemos pensar y por qué la medición de la productividad puede ser contraproducente, y también voy a tratar de convencerte de que debemos centrarnos y prestar más atención a la mejora y la comprensión de la experiencia de los desarrolladores, algo que ya hemos oído hoy varias veces, y por qué hacerlo puede mejorar el espacio de la productividad en general.

Pero primero hablemos de productividad.
Si quieres convertir una reunión aburrida con desarrolladores de software y sus gerentes en una emocionante, sólo tienes que sacar a colación el concepto de productividad de los desarrolladores y sugerir cómo debería medirse.
Y descubrirás que las personas presentes en la sala tienen puntos de vista muy diferentes sobre lo que significa la productividad para ellos y sobre cómo debería medirse la productividad, si es que se mide.
Y también podemos escuchar que, en esas reuniones, los líderes y gerentes de las empresas de software se preocupan por la productividad porque suponen que si tienen una mayor productividad de los desarrolladores, eso les ayudará a ofrecer valor a sus clientes más rápidamente.
Y los desarrolladores se preocupan por la productividad porque tener impacto y sentir que su trabajo aporta valor les hará más felices.
Pero, ¿qué significa realmente la productividad de los desarrolladores para los directivos y los desarrolladores?
Pues resulta que, junto con mis colegas Brian y Tom de Microsoft, hemos preguntado a directivos y desarrolladores cómo definen la productividad mediante una encuesta abierta.

Y escuchamos definiciones muy variadas.
De hecho, los directivos son más propensos a hablar de la productividad en términos de resultados de rendimiento, pero muchos de ellos también nos dieron definiciones ricas de productividad que no se limitaban a mantener a sus clientes contentos, sino que también incluían el bienestar de sus desarrolladores y la construcción de una cultura de trabajo positiva.
Los desarrolladores también nos dieron definiciones muy variadas, pero ellos -en comparación con sus directivos- eran más propensos a definir la productividad en términos de resultados de la actividad y del tiempo que pueden pasar haciendo su trabajo sin interrupciones y en un estado de flujo.
Sin embargo, muchos desarrolladores también compartieron que la productividad no se limitaba a la actividad y el flujo, sino que también se refería al impacto de su trabajo: ayudar a los demás y aprender para el futuro.


Así que definir la productividad es importante, pero los líderes -y yo diría que incluso algunos desarrolladores- quieren ser capaces de medir la productividad para poder entender el impacto que pueden tener los cambios en las herramientas, los procesos y los objetivos.
Y esto lo vimos, por supuesto, especialmente durante los dos últimos años de trabajo desde casa y el reciente impulso del trabajo híbrido.
Y, de hecho, los primeros intentos de comprender la productividad en términos de datos de telemetría, como el número de pull request, e incluso a través de encuestas a los desarrolladores, nos dieron la primera impresión de que la productividad había mejorado potencialmente o se había mantenido igual.
Pero, por supuesto, no era tan sencillo.
Así que, como descubrimos nosotros y otros cuando encuestamos a los desarrolladores en los primeros meses de la pandemia, muchos informaron de una mayor productividad percibida, pero a costa de un posible agotamiento, mientras que otros tenían dificultades para trabajar.

Y también aprendimos que el trabajo en equipo era más desafiante y que las interrupciones y, de hecho, la naturaleza de estas interrupciones habían aumentado.
Pero, ¿cómo dar sentido a toda esta investigación?
Así que éramos varios los que estudiábamos la productividad durante la pandemia y reconocimos que necesitábamos una forma mejor de enmarcar la productividad de los desarrolladores.
Así que, basándonos en años de investigación, no sólo en la que nosotros realizamos, desarrollamos el marco SPACE, que sintetiza las cinco dimensiones principales de la productividad que vimos surgir de los diversos estudios sobre la productividad de los desarrolladores.
Y SPACE nos ayuda a articular que la productividad de los desarrolladores no se reduce a la velocidad o al rendimiento y que hay muchos aspectos diferentes de la productividad que debemos considerar.

Permítanme hablar de estas cinco dimensiones con un poco más de detalle.
La primera dimensión, la satisfacción y el bienestar, examina el grado de satisfacción y felicidad de los desarrolladores.
Nuestra investigación anterior muestra que la satisfacción y la productividad percibida, aunque no son exactamente lo mismo, están correlacionadas, y es crucial observar cómo se sienten los desarrolladores para obtener una comprensión holística de su productividad.
Esto es algo que a menudo se mide a través de encuestas para obtener los datos subjetivos.
La siguiente dimensión del marco SPACE es el rendimiento.
Se refiere a los resultados de un sistema o proceso, y es el aspecto de la productividad que más preocupa a muchos líderes.

Y se podría pensar que evaluar el rendimiento es fácil, pero en realidad, aunque hay algunas medidas objetivas, hay muchas variables que debemos considerar.
Por ejemplo, una gran cantidad de código no significa necesariamente que sea de alta calidad, y un código de alta calidad no significa necesariamente que los clientes estén contentos, e incluso los clientes contentos no significan necesariamente más ingresos para una empresa.
La tercera dimensión que añadimos a SPACE es la actividad y los resultados.
Por supuesto, se trata de una métrica importante y es una de las primeras en las que piensan los desarrolladores, pero, como hemos dicho hasta ahora en esta charla, no es la clave de la productividad.

Y, de hecho, las actividades que realizan los desarrolladores también son complejas y diversas, y podemos medir algunas, por ejemplo, las solicitudes de extracción o el número de revisiones de código, pero otras actividades, como la asistencia a reuniones, están ayudando a otros desarrolladores que se están incorporando o aprendiendo para el futuro.
Estas cosas son difíciles de poner en números.
La siguiente dimensión de SPACE se refiere a la comunicación y la colaboración, algo de lo que también hemos oído hablar mucho hoy.
Esta dimensión subraya que el desarrollo de software es una actividad de equipo y un proceso inherentemente creativo y colaborativo.
Y la última dimensión que hemos añadido al marco SPACE se refiere a la eficacia y la fluidez.
La eficiencia y la fluidez es la capacidad de trabajar sin interrupciones.

Estos son temas que se han estudiado ampliamente en nuestra comunidad de investigación en los últimos años, y esta dimensión capta la importancia del flujo para los desarrolladores individuales y el impacto negativo que las interrupciones pueden tener en su trabajo.
Pero esta dimensión también capta lo bien que los equipos orquestan sus diferentes actividades y la frecuencia con la que progresan continuamente.
Así que SPACE nos ofrece una forma mucho más rica y matizada de pensar en la productividad, pero puede ayudarnos a medir la productividad, algo que preocupa especialmente a los directivos, como he mencionado.

Afortunadamente, hoy en día se reconoce que no existe una métrica universal para medir la productividad, y SPACE puede ayudarnos y desempeña un papel en este sentido al ayudarnos a elegir al menos varias métricas de diferentes dimensiones de la productividad, y de hecho nuestro documento describe esto con un poco más de detalle.
Pero no hemos terminado: la elección de estas métricas sigue siendo un reto y creo que tenemos que hacer mucho más para entender cómo medir los diferentes aspectos de la productividad o, de lo contrario, corremos el riesgo de ser contraproducentes.

This is especially important to be cautious about because, well, let's face it, engineers have been trained and conditioned to consider objective data and metrics that are easier to quantify before considering qualitative and subjective data, so before choosing metrics we need to first pause, take a step back, and focus on what are the goals, that is, are we trying to measure productivity in terms of improving the quality of the product, or are we trying to improve quality productivity in terms of the velocity of our engineering process and being able to continuously deliver code, or are we looking at the experience of the developer or perhaps it's all three.
Now for product quality and process quality we do already have some well-defined objective and validated quantitative metrics for these, but as I mentioned earlier, even these - measuring these is not simple, and they need to be - we need to carefully consider the context of the project and the developers before choosing these metrics.
The third one here, developer experience, in contrast relies much more on subjective metrics which can be harder to measure, but I'm proposing today that it is critical that we understand and improve developer experience, because we know from previous research that improving developer experience will lead to improvements in product quality and process velocity and vice versa.
But what do I mean when I say developer experience, you may wonder.
It is also complicated.
From a study I recently did with my colleagues Michaela and Abi, we define developer experience as how developers think about, feel about, and value their work.
And in this study we conducted in-depth interviews with 21 developers from across the industry to understand which factors have the most impact on their experience.
And we learned about key six factors - six key categories of factors: developer flow and fulfillment, how they collaborate with others and their culture at work, how their team and their product is managed, and the quality of the tools and the engineering processes they use.
But we also found that the impact these different factors have really depends on their specific context of the project and on their work.
And these factors can help us pick specific goals and in turn metrics that can improve developer experience and in turn developer productivity overall.
So in closing here are my main takeaways.
Productivity is more complicated than we think.
It means different things to different people and there is no universal productivity metric or even a universal set of metrics.
Space can help us select some metrics but first we need to clearly articulate our goals before selecting any.
And lastly we need I suggest that as an industry we need to place a lot more focus on understanding and improving developer experience, as doing so will lead to improvements in product quality and engineering velocity, all important goals within the space of productivity.
So thank you and I hope that you some of you might reach out to me by email or twitter if you have questions or thoughts to share and I would love to hear from you.
