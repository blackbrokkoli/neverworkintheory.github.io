El software rara vez funciona como se pretende mientras se escribe, las cosas van mal, lo sabemos. Un comportamiento estándar en algunos desarrollos de software es: ver el error, aplastar el error y acabar con él. Por el contrario, una de las cosas que he observado a lo largo del tiempo es que para las personas expertas el error, o más ampliamente las cosas que van mal o salen mal durante el desarrollo de software, es una oportunidad: para entender mejor, para cuestionar las suposiciones, para detectar la falta de comunicación o los conceptos erróneos, para tropezar con la visión. Así que las personas expertas no tienen miedo al error, sino que están atentas. A menudo no se atreven a eliminar el error, sino que se preguntan: "Qué raro, ¿por qué? De hecho, el error se considera una aporte útil en el curso del desarrollo progresivo. Esta charla pretende resumir algunas de las ideas sobre cómo las personas expertas y los equipos de alto rendimiento aprovechan esa oportunidad.
Llevo unos 30 años estudiando a las personas expertas y a equipos de alto rendimiento -en el trabajo, en la industria- para articular sus estrategias y prácticas, y en efecto actúo como un espejo o una lente, reflejando y enfocando. Lo que más me interesa es articular lo que realmente hacen los/as desarrolladores/as de software exitosos/as, no dictarles lo que deben hacer. Y espero que la charla tenga alguna resonancia con tu experiencia.
La investigación en ingeniería del software considera predominantemente el error de forma retrospectiva, basándose en el análisis del software y del funcionamiento, normalmente de proyectos masivos, generalmente en el contexto de los defectos que quedan en el código y que deben ser corregidos o de los fallos del sistema de software que surgen de una colección de defectos más pequeños. Nosotros hemos adoptado una visión más ecológica del error durante el desarrollo de software.
La literatura psicológica ofrece el concepto de error activo: estos errores humanos durante una tarea que toman la forma de deslices de acción, como errores tipográficos, o lapsos de memoria o atención, o errores cometidos en la formación y ejecución de intenciones durante la resolución de problemas, es decir, malas decisiones. Para recuperarse, una persona debe saber que se ha producido un error, debe identificar tanto lo que se ha hecho mal como lo que debería haberse hecho, y luego debe entender cómo deshacer los efectos del error. Así pues, los errores activos pueden ser detectados en el acto, o pueden ser detectados más tarde durante las comprobaciones y evaluaciones estándar, por obstáculos al progreso, por señales del entorno o por resultados inesperados. Así pues, la detección y recuperación de errores se desarrolla en el curso de la resolución progresiva de problemas. Entonces, ¿qué es lo que hacen los expertos y los equipos de alto rendimiento que les da mejores resultados?
Las personas expertas prestan atención a las lagunas. En lugar de limitarse a buscar lo que esperan, prestan atención a la información y a las señales que pueden alertarles de algo inesperado, de algo que no funciona. Prestan atención a los espacios entre las cosas, por ejemplo, a las interfaces, a las interacciones entre componentes, a la integración con otros sistemas, a los conceptos del dominio ocultos tras los tipos de datos estándar. Prestan atención a lo que no se muestra, a lo que falta, ya sea en el diseño o en la información o en la herramienta de razonamiento que están utilizando, y esta atención a las lagunas promueve la detección de defectos.
Mientras que muchas personas buscan pruebas de que las cosas funcionan como se espera, los personas expertas de los equipos de alto rendimiento están más dispuestas a las pruebas contrarias y, de hecho, sus prácticas les impulsan a buscarlas. Buscan pruebas, se preguntan por qué, hacen partícipes a los/as usuarios/as, descorrelacionan, obtienen y contrastan diferentes perspectivas. Así que se desafían a sí mismas: cuestionan sus supuestos, sus modelos, sus diseños, a través de mecanismos como el escéptico en la esquina o la depuración por parejas. Buscan la falsificación: no se limitan a preguntarse "¿Cómo voy a saber si esto es correcto?", sino que también se preguntan "¿Cómo voy a saber si esto es incorrecto?" y "¿Cómo voy a saber si una alternativa es correcta?". Y lo que es más importante, entienden que el código lo lee la gente, y escriben comentarios sobre lo que no está en el código, es decir, sus intenciones y suposiciones.
Entender algo rompiéndolo es una forma de análisis habitual en muchas ramas de la ingeniería: introducir errores o fallos deliberadamente puede ser una forma de obtener información sobre el funcionamiento de un sistema. Las personas expertas tienen experiencia en hacer eso intencionadamente, para probar su sistema, también ven las roturas inesperadas como una analítica potencial, y aprovechan la oportunidad para utilizarlas.
En lugar de eliminar los fallos lo antes posible, las personas expertas reflexionan sobre el problema y el modelo de solución. Reconocen que un pequeño fallo puede ser una señal de algo más. En lugar de descartar los fallos simples como errores de principiante o una de esas cosas, miran a su alrededor para detectar si hay una historia más completa, con lo que a menudo detectan otros problemas más profundos, como fallos de diseño o conceptos erróneos.
Así, las personas expertas no se limitan a arreglar el fallo -el único-, sino que se alejan y buscan los demás fallos que lo acompañan. Tienen en cuenta las dependencias y reflexionan sobre la estructura del código para comprender si el fallo forma parte de un panorama más amplio.
Y todo esto forma parte de la reevaluación del panorama y de la ampliación deliberada del espacio de búsqueda, una forma de examinar las barreras, comprender las limitaciones, revelar las suposiciones, mirar más allá de los problemas inmediatos y, por tanto, admitir potencialmente más soluciones potenciales o ampliar la definición del problema de forma que proporcione una visión y supere los defectos. Y lo hacen periódicamente a lo largo del proceso de diseño y desarrollo, no sólo al principio. Ahora bien, esto está en desacuerdo con muchas metodologías de desarrollo de software que suelen preocuparse por la convergencia hacia una solución. Y por eso, a veces, los equipos de alto rendimiento se alejan de una metodología. Este asunto de tomar distancia y reflexionar sobre el panorama es crucial. Todos conocemos ejemplos en los que el software cumplía las especificaciones, pero éstas eran inadecuadas.
Quienes desarrollan software no trabajan en un mundo ideal -lo sabemos-, sino en un entorno dominado por demandas conflictivas y presiones de tiempo, por lo que los fallos se entienden en el contexto del uso del software. El triaje eficaz tiene que ver con una evaluación de la relación coste-beneficio del impacto relativo del fallo frente al coste de solucionarlo. Los fallos que no son importantes suelen tolerarse o aplazarse. Brian Randall engloba esto en su concepto de fiabilidad. Su definición deja espacio para las imperfecciones en el código si éstas no afectan a la fiabilidad del software. Por tanto, la tolerancia consiste en gestionar el error técnicamente, pero también en gestionar el error socialmente: dejar advertencias de compilación en el código como recordatorio, documentar el aplazamiento y su justificación.
Del mismo modo, se ha demostrado que los/as desarrolladores/as hacen concesiones a veces para que el trabajo siga avanzando. Sus estrategias pueden incluir opciones subóptimas deliberadas, calculadas para servir a las necesidades inmediatas pero que permiten mejoras progresivas. El compromiso deliberado sugiere que el/la desarrollador/a gestiona activamente el problema a lo largo del tiempo, aplicando soluciones pragmáticas incrementales según sea necesario para avanzar en el programa de trabajo más amplio. Esta estrategia permite al/la desarrollador/a explorar el problema a lo largo del tiempo y, en última instancia, encontrar la mejor solución.
Pero además de esto, las personas que programan tienen redes de seguridad, y una de ellas es la depuración por pares. La depuración en pareja es algo que hacen la mayoría de los equipos de alto rendimiento y de lo que no se habla mucho. Se sientan juntos y hablan a través del código, a menudo emparejando deliberadamente a personas de niveles de experiencia teóricamente diferentes o que conocen diferentes partes de la base de código. Esto aporta una nueva perspectiva al código, difunde el conocimiento del código entre el equipo y tiende a exponer las suposiciones, los conceptos erróneos y los errores de comunicación.
Personas Expertas: las personas expertas reflexionan sobre sus herramientas y sobre su código. ¿Cómo se puede verificar que una herramienta de análisis hace lo que debe hacer? Pues bien, los expertos hacen jugar a los métodos entre sí para aumentar las probabilidades de detección: por ejemplo, incorporando errores al código para probar el  el conjunto de pruebas. Los expertos abordan las limitaciones de las herramientas combinándolas o intercambiándolas entre ellas; citando a un desarrollador, a menudo es una mezcla de diferentes formas de pensar la que te da la respuesta. Por tanto, la multiplicidad de técnicas y herramientas implica más formas de pensar, pero también requiere una mayor carga cognitiva, y eso exige una coordinación inteligente. Así que la selección no es arbitraria: los equipos prueban herramientas, evalúan sus méritos y reúnen conjuntos de herramientas que se ajustan a su cultura de desarrollo y abarcan diferentes perspectivas. En resumen, los expertos utilizan prácticas disciplinarias sistemáticas que están socialmente arraigadas y reforzadas.
Y lo que es más importante, al existir una cultura disciplinada, son capaces de confiar en el equipo para detectar los deslices, dando así a los individuos la libertad de experimentar. Un estudio de los equipos de alto rendimiento deja claro que la interacción entre los desarrolladores es crucial, ya que desempeña un papel fundamental tanto en el fomento de la creatividad y la innovación como en la gestión eficaz de los errores y la incorporación de la práctica sistemática y el rigor. Así, la cultura de equipo que aprovecha tanto los puntos fuertes individuales como las múltiples perspectivas proporciona la red de seguridad.
Este enfoque de los errores tiene una advertencia, y es que la atención se centra en solucionar el error en lugar de solucionar la culpa. La cultura del equipo es importante: encarna la mentalidad que ve el error como una oportunidad, que abraza múltiples perspectivas, que refuerza prácticas como el triaje o el juego de métodos entre sí o la programación en parejas, que desafía rutinariamente la comprensión y las suposiciones. Esto ayuda a fortalecer y desarrollar el equipo, así como a mejorar el software. Pero, de manera diferente, la experiencia en software no se produce por accidente. Hay... estas son prácticas que puedes entender e invertir en ellas haciendo espacio en tu cultura organizacional e invirtiendo tiempo para esta mentalidad, este tipo de prácticas, estos diálogos, estás haciendo espacio para que la experiencia funcione y crezca y para que el desarrollo de software a nivel experto sea posible. Así que tal vez tratar esto como una oportunidad para reflexionar sobre su práctica. Gracias por escuchar.
