Lo que me gustaría presentarles hoy son las implicancias del uso de las Acciones de GitHub como mencionó Mike y cómo evitar efectos inesperados en su flujo de trabajo de desarrollo y en la dinámica del grupo. Así que históricamente hay una gran cantidad de trabajo manual que ha sido automáticamente - detectado automáticamente, y que ha sido automatizado - lo siento - por las herramientas de flujos de trabajo de automatización también por los bots de software y herramientas de integración continua, y recientemente GitHub también introdujo para ayudar durante este proceso de automatización de issues y los flujos de trabajo de pull request, por lo que GitHub Actions. 
Y probablemente todos sepamos lo que es una acción de GitHub, pero lo que no sabemos, y lo que no entendemos, es lo que hace, y lo que implica su uso en tu proyecto, en tus repositorios. Así que, básicamente, las Acciones de GitHub fueron creadas para automatizar tareas basadas en varios disparadores. Por ejemplo, la creación de una nueva rama, o comentarios, pull requests, y también comentarios sobre estas solicitudes y comentarios, y puede ser fácilmente compartido de un repositorio a otro haciendo más fácil la automatización de cómo construir, probar y desplegar proyectos de software. Así que es muy fácil de usar, y para utilizar en diferentes proyectos. Por lo tanto, - está destinado a ayudar a los desarrolladores para automatizar el flujo de trabajo. Y este es un ejemplo típico de una acción de bienvenida: podemos ver que las acciones son tratadas como código. Así que tenemos estos archivos de configuración, por lo que esperamos interactuar con él y también tratarlo como código. Y este código puede generar algunas salidas en nuestros proyectos, por ejemplo, esta acción de GitHub, esta acción de bienvenida, crea un comentario en nuestro proyecto.
Pero entonces, ¿cómo utilizan los desarrolladores esta acción? Esto es algo que hemos estudiado. Así que mirando los archivos de configuración de estas acciones para 3000 proyectos - diferentes proyectos - encontramos 700 acciones diferentes que se usan. Y estas acciones están repartidas en 20 categorías, y estas son las más comunes. Así que las acciones de integración continua, las utilidades, el despliegue, la publicación, y la calidad del código. Y también encontramos que una acción típica se añade dos veces y nunca se quita o se modifica, lo que significa que casi nadie revisa esta configuración, en esta decisión. Así que una vez que se incluye la acción casi nadie la revisa. Sin embargo, algunas acciones específicas se eliminan, sus argumentos se cambian muchas veces. Así que desde que mencioné que esperamos tratarlo como código, aquí vemos que no lo estamos tratando como código, porque una vez que añadimos una nueva acción a nuestro proyecto estamos añadiendo una nueva dependencia. Así que cada vez que tenemos que mantener esta acción tenemos que volver a revisarla y tenemos que mantenerla actualizada, por lo que es una nueva dependencia que añadimos.
Y también miro cómo los desarrolladores están discutiendo lo que están diciendo acerca de estas acciones. Básicamente, los desarrolladores discuten sobre el mantenimiento de estas acciones y también sobre la implementación. Así que para ellos es realmente importante como - cómo se mantiene porque es una nueva dependencia, ¿verdad?, y también cómo implementar - cómo crear una nueva basada en sus necesidades, por lo que también incluye las discusiones sobre el cambio de una automatización a otra, por ejemplo, herramientas de CI / CD, a las acciones, y también algunas sugerencias sobre cómo implementar esta acción y también solicitar nuevas acciones.
Así que de nuevo aquí vemos que una vez que añadimos una nueva acción no sólo estamos añadiendo una nueva pieza de código que va a automatizar nuestro flujo de trabajo: estamos añadiendo una nueva dependencia. Así que creemos que estamos añadiendo código, y estamos tratando con el código, pero estamos discutiendo - estamos tratando de manera diferente y estamos discutiendo sobre ella - cómo sus dependencias y herramientas.
Y también, es importante para nosotros saber cuál es el impacto de añadir esta nueva dependencia a nuestro proyecto. Así que estaba buscando en diferentes repositorios, lo que hicieron antes de la introducción de estas acciones, y cómo fue después de la introducción de esta acción. Puedo ir en más detalles más tarde si quieren saber más al respecto, pero básicamente nos fijamos en esto - un montón de diferentes métricas antes y después, y vemos que hay dos cosas interesantes aquí. En primer lugar, hay un aumento en el número de contribuciones rechazadas. Así que tienes, después de la incorporación de estas acciones, se pueden ver más pull request rechazados en su proyecto. ¿Es algo que esperabas? ¿Quieres rechazar más? ¿Y por qué estás rechazando más? Así que es importante tenerlo en cuenta. Y también hay una disminución en el número de commits que los pull requests que se mergearon deben tener. Así que estas dos cosas, por lo menos estos dos impactos, los vas a ver en tu proyecto. 
Así que, básicamente, es importante tener en cuenta que tenemos primero una percepción y la realidad. La percepción que tenemos es que estamos añadiendo una nueva herramienta, pero en realidad la adopción de las acciones de GitHub está tomando una dependencia, y entonces tenemos que tratarlo como una nueva dependencia a nuestro proyecto. Además, el uso de GitHub Actions también podría afectar a la forma de trabajar de la comunidad. Así que la cantidad de trabajo que los desarrolladores tienen que hacer para cada nuevo pull request, para cada nueva contribución que quieren hacer en su proyecto, y cómo interactúan. Así que estas dos cosas podrían ser diferentes de lo que estás esperando cuando se agrega una nueva dependencia, por lo que debe tener cuidado. Y lo que sugiero es que tienes que medir la diferencia. Así que si quieres entender lo que está pasando y lo que vas a ver en tu proyecto, y si quieres entender, si no estás teniendo ningún resultado inesperado de estas acciones, tienes que medir lo que está pasando con tus proyectos - con tus proyectos. Así que, por ejemplo, si estás pensando en utilizar las Acciones de GitHub y te preocupa el rendimiento -el rendimiento de tu código-, tienes que medir los cambios en el código. Cómo era antes y cómo es después de añadir estas nuevas acciones. Y si te preocupa la comunidad, cómo se comunican los desarrolladores entre sí, y cuánto trabajo necesitan hacer, y cómo cambia el flujo de trabajo de desarrollo y cómo afecta a los desarrolladores, entonces tienes que medir la comunicación de los desarrolladores y la cantidad de trabajo y cómo lo están haciendo antes y después de la introducción de estas acciones. Así que esto es lo que quiero mostrar hoy y si tienes alguna pregunta estaré encantado de responderla. Gracias.
