I'm going to talk to you today about how your mind learns to program. So learning is an essential part of being a software developer, both when we initially learn to program before we begin our career but also throughout our career as we learn new technologies, new frameworks, new programming languages. But how does our learning actually work? That's what I'm going to talk about today.
So learning involves storing and thinking concrete facts. So for example when you're very young you learn numbers - you learn how to count - so you learn one two three four. Then later when you come to learn programming you're probably going to learn that whole numbers are also called integers. So your mind stores these facts and it also links together facts that it thinks are related so that you can associate these two things together. So that's concrete facts, but a lot of what we do in programming is actually learning abstract concepts. So think for example about trying to learn about the concept of values or the concept of types when you're initially learning how to program. So how can we learn this? One possibility is for example to go to Wikipedia - the start of the article "Values" there says that the value is the representation of some entity that can be manipulated by a program. The members of a type are the values of that type. But this isn't very useful for our learning: it's kind of very abstract and fuzzy and it kind of slips through your fingers as you try and reread it to actually understand it. So it's quite difficult to learn abstract concepts concepts by directly reading just a description of them. What works better is if we use examples. So if you learn instead that "hello" and "bye" are string values, 0, 12, -5 are integer values, and true and false are Boolean values, and then once you've learned these facts your brain can then start linking them together to say, all these are different kinds of values - they have different types. And this way you can actually start to get a handle on the abstract concepts.
So abstraction is learned by linking these examples together: that's the best way for your brain to learn. So our first lesson is that you should study varied examples if you want to learn abstract concepts. And also, if you're having to explain this to somebody else, perhaps to a junior developer, you should use examples when explaining, because that's going to be easier for them to learn the idea of the abstraction.
So let's talk now about how memory is organized. So memory is roughly split into sort of two different systems. So we have long-term memory, which is what we sort of classically think of as memory, where we store all these facts and link them together. But we also have something called working memory. So long-term memory is essentially unlimited and can store all these different types of facts, whereas working memory actually has a very small capacity. You might have heard of this before: the idea that you can only keep, sort of, around five things, four to six numbers - estimates vary - in your working memory at any one time. So that's a very small sort of limited fixed capacity. And it's not something that you can train to improve: it seems to just be sort of biologically inherent. So you can never increase your working memory capacity across your lifetime.
So what things are actually held in the working memory? Well, it's essentially the concepts pulled in from long-term memory. So each of the items held in working memory is something that you've learned and stored previously into your long-term memory. But you might then think, okay, well if working memory is kind of so limited, how can we ever sort of get smarter? How can we improve our capacity? How can we get better at solving sort of increasingly complex problems? And the answer to that lies in the long-term memory. So we're pulling in sort of one item, something called a "chunk", from long-term memory, but they don't all have to be necessarily the same size. You can learn more about something and increase the size of an item in your long-term memory. You could learn about related things in your long-term memory such that they effectively get merged together. So by learning more we get larger items in our long-term memory and that means that our working memory can actually hold more knowledge overall so that we end up with some spare capacity to hold even more things. So our lesson there is increasing your knowledge actually increases your processing capacity for dealing with problems.
So your brain is very eager to link related facts together in order to fulfill this process. So for example when I was showing this slide a moment ago you may well have been thinking, ah, so working memory is a bit like CPU registers or like a cache, and then there's these kind of pointers pointing off to long-term memory which is this sort of other data structure. So you're very keen to kind of link your existing knowledge about compute - how computers work - to knowledge about how the brain works. But we have to be a bit careful: your brain does not work exactly like a computer. The sort of differences - it's not quite as neat as the way that the computer is organized, and it can have sort of different capabilities that the computer. And this is an example of a more general point, which is that sometimes existing knowledge can trip you up. You can form bad links between things you already know and things you're trying to learn. So for example, you might learn how inheritance works in Java then you come to learn inheritance in C++, you try and sort of use all your existing knowledge, and later you realize that actually there's some finer points that don't match up and there's some key differences there, but your brain was very eager to sort of link all this together and so it can lead you into sort of incorrect knowledge.
So the last thing I'm going to talk about is to do with problem solving. So a common misconception as to how this works - so there's various domains where you might need to solve a problem, so in your programmer - in your day-to-day life you might want to fix the performance of a web service, for example, but there might be other things you want to do that involves solving problems. You might want to make a move in a chess game, or you might want to solve a brain teaser - so weighing a jumbo jet was kind of a common interview question a few years ago, an example of sort of these teaser type problems. So the misconception that people have about problem solving is that you have sort of one problem solving process in your brain and it's like a sort of procedure that you can apply to all these different things that you might need to tackle. And the implication of this was, therefore, people thought that maybe if you, for example, learned more about how to do chess that improves your problem solving and therefore will improve your programming. Also, they might think that by testing you on how good you are at brain teasers they can test your problem solving module and thus test how good you are at programming. But this is not the correct model of how things work - so this is wrong. How it actually works is that we have totally separate domains and we learn problem solving per domain. So if you want to fix the performance of a web service then you learn how to solve that problem, but your knowledge is specifically constructed around that domain and your problem-solving ability is based in that domain. It's then separate from how good you are at making a chess move, and separate again from how good you are at brain teaser problems. So learning one won't improve the other and testing one won't necessarily reveal very much about one of the others. So this leads to our third lesson which is that problem solving is not a generic skill that's applied across all different domains. It's actually acquired per domain through generally practicing on that domain.
So how can we use all these lessons to sort of supercharge our ability and to sort of learn functions and solve problems? So the lessons we had were to use varied examples to learn and explain abstract concepts - your brain likes to learn the abstract by joining together concrete examples. We could increase our processing capacity by increasing and strengthening our knowledge, so by learning more in long-term memory and increasing the sort of size of the items in our long term memory, we can actually free up working memory capacity to deal with more problems. And this is another way that you know your brain is not like a computer: this is quite sort of counter-intuitive if you think of it from a, sort of, how a CPU functions. And finally you can improve problem solving within a specific domain but it's not shared between different domains, and if you want to know how good somebody is at solving problems within a domain - a particular programming language or framework or whatever - then you should look at that specific skill, not by trying to test it - by sort of coming at it from another angle. So those are my lessons and there's my contact details in case you want to know any more about this. Thank you for listening.
