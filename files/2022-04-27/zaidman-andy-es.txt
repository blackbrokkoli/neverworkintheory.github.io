Programador de día, tester de noche: ¿qué quiero decir realmente con esto? Bueno, habiendo mirado las presentaciones que me precedieron, creo que hay una conexión muy lógica con lo que algunas de las personas que están trabajando en testing que estamos viendo como Maurício y Manuel, pero también con lo que Igor acaba de decir sobre estimaciones, así que vamos a meternos en la cocina, porque, en realidad, bueno si mis diapositivas se movieran... En realidad me gusta usar la cocina como un universo paralelo al universo de la programación en el que normalmente trabajamos como desarrolladores. Así que personalmente, me encanta cocinar, y me gusta hacer platos intrincados y - y ponerlos en la mesa, pero como se puede imaginar, esta parte del trabajo en la cocina no me suele gustar mucho. Y creo que mucha gente estaría de acuerdo conmigo, que esto es realmente lo que tratas de retrasar tanto como sea posible, y bueno, tal vez tienes un lavavajillas, y no es tan malo, pero, bueno, definitivamente no es mi parte favorita del trabajo. Así que si te preguntara cuánto tiempo cuesta realmente hacer este hermoso plato, y tal vez alguien diría que 30 minutos, y si te preguntara cuánto tiempo pasarías lavando los platos, probablemente sería bastante más tiempo del que te lleva cocinar. Así que desde ese punto de vista, hay un mensaje que llega, así que voy a ver si eso es algo para mí... No... Así que desde esa perspectiva, hemos estado observando cómo la gente percibe el tiempo que se tarda en hacer las tareas que disfrutas, frente a las tareas que quizás no disfrutas tanto. En realidad hay un término para eso que es la cronocepción, pero también es - es una especie de forma abreviada de la crono-percepción el tiempo que se tarda en hacer algo.

Y lo que realmente nos preguntamos en los estudios que hemos hecho es, cómo la gente ve las pruebas de software, y cuánto tiempo están gastando en las pruebas de software. Así que mis diapositivas se mueven - en realidad lo hicimos - creamos una herramienta un plug-in para algunos entornos de desarrollo populares. Lo lanzamos a 2442 desarrolladores de muchos países, pero la clave es que al tener esta herramienta instalada durante varios meses, pudimos recoger 150 años-persona de desarrollo durante el estudio. Así que esto nos da una amplia base para ver realmente cómo la gente está haciendo pruebas. Ahora, durante la instalación que tenía este asistente de lujo y estábamos pidiendo a la gente, hacer pruebas, hacer que en el IDE, hacer otros tipos de pruebas, cualquier otra opinión que la gente pueda tener en las pruebas. Así que una de las preguntas clave era cuánto tiempo crees que estás gastando en la ingeniería de código de prueba frente a la ingeniería de lo que llamamos código de producción en el IDE. Y las respuestas - la respuesta media de todos los 2443 desarrolladores que instalaron la herramienta fue aproximadamente 50-50. Así que el 49,5 por ciento de su tiempo se dedicó a la ingeniería de código de prueba y el 50,5 por ciento se dedicó a la ingeniería de código de producción. Ahora hay algo realmente extraño aquí, porque hay un libro realmente famoso - The Mythical Man Month de Frederick Brooks - y en ese libro está escrito que las pruebas toman aproximadamente el 50 por ciento de nuestro tiempo. Así que es realmente muy extraño que el libro de - que fue publicado a finales de la década de 1970 - en realidad predijo los resultados de esta primera pregunta en nuestro estudio. Así que tal vez haya algo de folclore en nuestra profesión.


Ahora, la pregunta clave es, obviamente, que después de observar a estos desarrolladores, tras un mínimo de cinco meses y potencialmente incluso dos años o más, ¿cuál sería la respuesta? ¿Cuánto tiempo se dedicaría realmente a la ingeniería del código de prueba? Esto es dramáticamente diferente de las estimaciones. Una cuarta parte de su tiempo -de estos desarrolladores- se dedicó a la ingeniería del código de prueba en el IDE y el 75 por ciento se dedicó a la ingeniería del código de producción. ¿A qué se debe esto? Bueno, siguen siendo suposiciones, pero el hecho de que las pruebas de software son realmente una actividad destructiva, mientras que la ingeniería del código de producción es en realidad algo que da vida, algo que probablemente se disfruta más, al igual que la cocina frente a lavar los platos, podría ser una razón aquí por la que la gente sobreestima sus esfuerzos de prueba.

Pero hay más en este estudio, porque también examinamos cómo la gente hace el desarrollo dirigido por pruebas, y esto realmente toca lo que Davide estaba diciendo unas cuantas presentaciones antes. Así que creo que todos sabemos lo que es el desarrollo dirigido por pruebas - es la idea central de que escribes tus pruebas primero y luego implementas partes del código de producción para que tus pruebas pasen. Y esto realmente requiere este ciclo en el que tienes una prueba que falla, la haces pasar, la refactorizas, y continúas haciendo eso. Así que de los 574 desarrolladores, que es como poco menos del 20 por ciento de los desarrolladores en nuestro estudio, que afirmaron hacer TDD, en realidad sólo había 47 que realmente hicieron TDD. Ahora usted puede decir, bueno, tal vez lo hicieron fuera de la observación - período de observación, que podría ser, pero creo que el mensaje clave aquí es que mucha gente piensa que lo hacen, pero en la práctica no lo hacen tan a menudo. Porque incluso para los desarrolladores que observamos que estaban haciendo TDD sólo lo hicieron en casos muy específicos, probablemente porque no es tan fácil de hacer.

¿A qué nos lleva esto realmente? Bueno, la primera conclusión es que lo que los desarrolladores creen que hacen o calculan sus esfuerzos no es lo que realmente hacen en la práctica. Así que la cronocepción de las tareas de ingeniería de software es algo con lo que tenemos que tener cuidado. Y en segundo lugar, tal vez una petición es que tenemos que entender mejor las tareas de ingeniería de software: cómo lo hacemos, y también el esfuerzo que se necesita para hacerlas. Y necesitamos tener mejores herramientas para estimar cuánto tiempo se necesita para probar, cuánto tiempo realmente se necesita para implementar la característica. Así que mi petición aquí es realmente utilizar también el análisis de software durante los desarrollos para entender mejor lo que usted y su equipo están haciendo y también crear estimaciones más fiables.

Así que, finalmente, las dos conclusiones de mi charla: la cronopercepción - tener en cuenta que ciertas cosas llevan más o menos tiempo dependiendo de ciertos factores de tu personalidad. Y una petición general de hacer más análisis de software para ser un mejor programador. Gracias.

