Programador de día, tester de noche: ¿qué quiero decir realmente con esto? Bueno, habiendo mirado las presentaciones que me precedieron, creo que hay una conexión muy lógica con lo que algunas de las personas que están trabajando en testing que estamos viendo como Maurício y Manuel, pero también con lo que Igor acaba de decir sobre estimaciones, así que vamos a meternos en la cocina, porque, en realidad, bueno si mis diapositivas se movieran... En realidad me gusta usar la cocina como un universo paralelo al universo de la programación en el que normalmente trabajamos como desarrolladores. Así que personalmente, me encanta cocinar, y me gusta hacer platos intrincados y - y ponerlos en la mesa, pero como se puede imaginar, esta parte del trabajo en la cocina no me suele gustar mucho. Y creo que mucha gente estaría de acuerdo conmigo, que esto es realmente lo que tratas de retrasar tanto como sea posible, y bueno, tal vez tienes un lavavajillas, y no es tan malo, pero, bueno, definitivamente no es mi parte favorita del trabajo. Así que si te preguntara cuánto tiempo cuesta realmente hacer este hermoso plato, y tal vez alguien diría que 30 minutos, y si te preguntara cuánto tiempo pasarías lavando los platos, probablemente sería bastante más tiempo del que te lleva cocinar. Así que desde ese punto de vista, hay un mensaje que llega, así que voy a ver si eso es algo para mí... No... Así que desde esa perspectiva, hemos estado observando cómo la gente percibe el tiempo que se tarda en hacer las tareas que disfrutas, frente a las tareas que quizás no disfrutas tanto. En realidad hay un término para eso que es la cronocepción, pero también es - es una especie de forma abreviada de la crono-percepción el tiempo que se tarda en hacer algo.

Y lo que realmente nos preguntamos en los estudios que hemos hecho es, cómo la gente ve las pruebas de software, y cuánto tiempo están gastando en las pruebas de software. Así que mis diapositivas se mueven - en realidad lo hicimos - creamos una herramienta un plug-in para algunos entornos de desarrollo populares. Lo lanzamos a 2442 desarrolladores de muchos países, pero la clave es que al tener esta herramienta instalada durante varios meses, pudimos recoger 150 años-persona de desarrollo durante el estudio. Así que esto nos da una amplia base para ver realmente cómo la gente está haciendo pruebas. Ahora, durante la instalación que tenía este asistente de lujo y estábamos pidiendo a la gente, hacer pruebas, hacer que en el IDE, hacer otros tipos de pruebas, cualquier otra opinión que la gente pueda tener en las pruebas. Así que una de las preguntas clave era cuánto tiempo crees que estás gastando en la ingeniería de código de prueba frente a la ingeniería de lo que llamamos código de producción en el IDE. Y las respuestas - la respuesta media de todos los 2443 desarrolladores que instalaron la herramienta fue aproximadamente 50-50. Así que el 49,5 por ciento de su tiempo se dedicó a la ingeniería de código de prueba y el 50,5 por ciento se dedicó a la ingeniería de código de producción. Ahora hay algo realmente extraño aquí, porque hay un libro realmente famoso - The Mythical Man Month de Frederick Brooks - y en ese libro está escrito que las pruebas toman aproximadamente el 50 por ciento de nuestro tiempo. Así que es realmente muy extraño que el libro de - que fue publicado a finales de la década de 1970 - en realidad predijo los resultados de esta primera pregunta en nuestro estudio. Así que tal vez haya algo de folclore en nuestra profesión.


Now the key question obviously is that after observing these developers, after minimally five months and potentially even two years or more, what would be the answer? How much time would actually be spent on engineering test code? That is dramatically different from the estimations. One quarter of their time - of these developers - was spent on engineering test code in the IDE and 75 percent was spent on engineering the production code. Why is that? Well, these remain assumptions, but the fact that software testing is really a destructive activity, while engineering production code is actually something that you bring to life, something that you probably enjoy more, just like the cooking versus doing the dishes, could be a reason here why people overestimate their testing efforts.

But there is more to this study because we also looked at how people do test driven development, and this really touches upon what Davide was telling a few presentations before. So I think we all know what test driven development is - it's the core idea that you write your tests first and then implement parts of the production code so that your tests pass. And this really requires this cycle where you have a failing test, you make it pass, your refactor, and you continue doing that. So from the 574 developers, which is like just under 20 percent of the developers in our study, that claimed to do TDD, there were actually only 47 that really did TDD. Now you can say, well, maybe they did it outside of the observation - observation period, that could all well be, but I think the key message here is that a lot of people think they do it, but in practice they don't do it that often. Because even for those developers that we did observe that they were doing TDD they only did it in very specific cases, probably because it's not that easy to do.

So what does that really bring us to? Well, the first takeaway is what developers think they do or they estimate their efforts on, is typically not what they really do in practice. So the chronoception of software engineering tasks is really something that we need to be careful for. And secondly, maybe a plea is that we need to understand software engineering tasks better: how we do it, and also the effort that it takes to do them. And we need to have better tools to estimate how much time does it take to test, how much time does it really take to implement the feature. So my plea here is really to also use software analytics during developments to better understand what you and your team are doing and also create more reliable estimations.

So finally the two takeaways of my talk: the chrono perception - take into account that certain things take more or less time depending on certain factors in your personality. And a general plea to do more software analytics to become a better programmer. Thanks.
