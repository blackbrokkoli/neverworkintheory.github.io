Hola a todos, mi nombre es Mauricio y estoy aquí para defender la cobertura de código hoy. ¿Por qué? Bueno, porque estoy bastante seguro de que todos hemos escuchado cosas como: "La cobertura de código es inútil porque puede ser engañada, o porque me obliga a escribir pruebas inútiles, o porque, ya sabes, si escribes pruebas sin aserciones tu cobertura será alta pero tus pruebas no estarán probando nada, o 100 de cobertura de código, no significa que tus pruebas sean buenas, bla, bla, bla". Pero déjame decirte algo: si realmente crees en eso, es simplemente porque no lo estás usando adecuadamente, ya sabes, hacer tiempo de caída, y eso es todo. No te preocupes, hay una manera de utilizar la cobertura de código y vamos a hablar de ello ahora.
En primer lugar, la cobertura de código debe utilizarse para aumentar - para mejorar sus conjuntos de pruebas, y no como algo que sólo tiene que tener, ¿verdad? ¿Qué quiero decir con aumentar los conjuntos de pruebas? Piensa en cómo los desarrolladores escriben software. Así por ejemplo, tienes que implementar una funcionalidad. Entonces empiezas un bucle de implementación de un poco de código de producción y luego un poco de código de prueba - no importa si haces desarrollo dirigido por pruebas o no - en algún momento simplemente has terminado, y entonces surge una gran pregunta, y la pregunta es: "¿Esta prueba es suficiente? ¿He probado todo lo que tenía que probar?" Y aquí es precisamente donde entra en juego la cobertura de código, porque se puede obtener la información a partir de ella. ¿Y cómo lo haces? Bueno, ejecutas tu herramienta de cobertura de código, ves lo que cubriste, lo que no cubriste, reflexionas sobre ello, puede que escribas más pruebas, repites el ciclo hasta que sientas que has terminado, y cuando hayas terminado habrás terminado, ¿no?
Permítanme hablar un poco más sobre esto, cómo sabemos que hemos terminado, ¿verdad? Normalmente las preguntas que me hago es, cuando miro la línea que no está cubierta, por ejemplo, me pregunto, ¿por qué no está cubierta? Porque cuando estaba escribiendo las pruebas con la especificación en mente, ¿por qué se me pasó esta línea?, ¿no? Tal vez haya una razón para ello. Tal vez me olvidé de ella, y luego simplemente escribí la prueba. Pero tal vez es sólo porque es algo que realmente no merece ser probado, tal vez es sólo un método de obtención que no me parece que sea necesario probar porque, ya sabes, escribir una prueba para esta línea no será realmente una prueba fuerte - nunca revelará un error o algo, correcto, así es como respondo a, "¿Es esto suficiente?" Y el último punto de ahí, ya sabes, esto es algo que siempre debes evitar, no debes escribir una prueba sólo porque, ya sabes, quieres aumentar tu número de cobertura, esa no es una buena razón para escribir una prueba.
Genial, así que ya sabes que la cobertura de código se utiliza para aumentar tus pruebas, y lo que acabamos de ver es que también la cobertura de código debería ayudarte a tomar la decisión de escribir pruebas -más pruebas- o no, pero no debería ser la que tomara la decisión por ti, ¿verdad? La cobertura de código sólo te da información. Entonces la pregunta del millón: ¿una mayor cobertura realmente conduce a un mejor software? Así que nunca he investigado la cobertura de código por mí mismo, pero un montón de gente inteligente lo ha hecho, y voy a caminar a través de algunos de los documentos que me gustan.
Por ejemplo, el primero de Hutchins y sus colegas de 1994, hace mucho tiempo, compararon diferentes suites de pruebas con diferentes coberturas, y vieron la efectividad de estas suites de pruebas. Y los resultados son que las suites de pruebas que logran más del 90 por ciento de cobertura son mejores para detectar los fallos que las suites que no logran tanta cobertura. Y eso tiene sentido, cierto, cuanta más cobertura -más cubres- más fallos puedes encontrar, por lo tanto es simplemente mejor.
Y otro hallazgo interesante que también coincide con nuestra percepción es que la cobertura 100 por sí sola no es fiable, no es suficiente para indicar si tu conjunto de pruebas es lo suficientemente bueno. Esto significa que si tienes 100 de cobertura no significa que tus pruebas sean perfectas o algo así.
A continuación, otro trabajo de investigación de 2009 -y- hallazgos interesantes también. Uno de ellos es que, si sigues añadiendo pruebas por sí mismo, esto no es una estrategia eficiente. Lo que tienes que hacer es escribir pruebas para cosas que aún no has probado. Así que miras la cobertura y luego escribes una prueba para eso, y estas pruebas tendrán más probabilidades de encontrar nuevos fallos que si sólo sigues añadiendo pruebas para las cosas que ya has probado. Eso tiene mucho sentido, cierto, y en realidad coincide con el procedimiento que te acabo de dar antes: así que escribes pruebas basadas en la especificación cuando estás implementando tu característica. Una vez que has terminado, aumentas tus conjuntos de pruebas utilizando la cobertura.
Otra investigación más, en este artículo -en este trabajo- los autores descubrieron que la cobertura no siempre está relacionada con la eficacia, así que quizás una cobertura alta no significa realmente que tus pruebas sean buenas, pero los autores concluyen que la cobertura es muy buena para identificar las partes del sistema que no han sido probadas correctamente, pero es muy mala si la utilizas como objetivo de calidad. Así que lo que obtengo de esto es que nunca debes definir un objetivo de cobertura, ya sabes, si tu empresa tiene ese número mágico que siempre debe ir por, digamos, 90 de cobertura o lo que sea, esto tal vez no es una muy buena idea.
Por último, tenemos todo tipo de criterios de cobertura diferentes: cobertura de líneas, cobertura de ramas, cobertura de ramas de condiciones, MCDC, cobertura de rutas, etc etc etc, pero quizá no necesites todos esos criterios extravagantes. La cobertura de sentencias parece ser un buen indicador de la calidad de las pruebas, ¿verdad? La más simple - la cobertura de sentencias - cualquier herramienta puede calcularla, no importa realmente el lenguaje de programación, así que no tienes que ir a por cosas súper sofisticadas: las cosas básicas siempre funcionan, ¿cierto?, y eso me encanta.
Un último consejo, algo que también obtuvimos de estos documentos, es que una alta cobertura puede no significar mucho, ¿correcto?, el 100 por ciento de cobertura no significa que tus pruebas sean perfectas, pero una baja cobertura significa mucho, correcto, significa que tu suite de pruebas es débil - puede no revelar todos los errores que quieres revelar. Autopromoción descarada, acabo de escribir un libro sobre pruebas de software, hay un capítulo entero sobre esto. Déjenme resumir mi charla, así que, no odien la cobertura de código porque la cobertura de código no odia. Solo hay que usarla correctamente. ¿Cómo lo hacemos? Usamos la cobertura para aumentar nuestro conjunto de pruebas, usamos la cobertura para informar la decisión de si debo probar un poco más o no, pero no toma la decisión por ti, y finalmente, la cobertura alta puede no significar mucho, pero la cobertura baja significa mucho. Muchas gracias.