What I would like to present to you today are the implications of using GitHub Actions as Mike mentioned and how to avoid unexpected effects on your development workflow and group dynamics. So historically there is a lot of manual work that has been automatically - automatically detected, and that has been automated - sorry - by automation workflows tools also for software bots and continuous integration tools, and recently GitHub also introduced it to help during this process of automating issues and pull request workflows has introduced it, so GitHub Actions. And we all probably know what a GitHub action is, but what we don't know, and what we don't understand, is what it does, and what are the implications of using it on your project, in your repositories. So basically GitHub Actions was created to automate tasks based on various triggers. For example, the creation of a new branch, or comments, pull requests, and also comments on these requests and comments, and it can be easily shared from one repository to another making it easier to automate how we build, test, and deploy software projects. So it's really easy to use, and to use in different projects. so it's - it is intended to help developers to automate the workflow. And this is a typical example of a welcoming action: we can see that actions are treated as code. So we have these configuration files, so we expect that we are going to interact with it and also deal with it as code. And this code can generate some outputs in our projects, for example, this GitHub Action, this welcoming action, creates a comment in our project.
But then how do developers use this action? This is one thing that we studied. So by looking at the configuration files of these actions for 3000 projects - different projects - we found 700 different actions being used there. And these actions are spread across 20 categories, and these are the most common ones. So continuous integration actions, utilities, deployment, publishing, and code quality. And we also found that a typical action is added twice and never removed or modified, which means that almost nobody revisit this configuration, in this decision. So once you include the action almost nobody revisits. However some specific actions are removed, their arguments are changed many times. So since I mentioned that we expect to treat it as code, here we see that we are not treating it as code, because once we add a new action to our project we are adding a new dependency. So every time we need to maintain this action we need to revisit and we need to keep it up to date, so it's a new dependency we add.
And I also look at how developers are discussing what they are saying about these actions. So basically, developers discuss about the maintenance of these actions and also the implementation. So for them it's really important how the - how it is maintained because it's a new dependency, right, and also how to implement - how to create a new one based on their needs, so it also includes discussions about switching from one automation to another, for example CI/CD tools, to actions, and also some suggestions on how to implement this action and also requesting new actions.
So again here we see that once we add a new action we are not just adding a new piece of code that I'm going to automate our workflow: we are adding a new dependency. So we believe we are adding code, and we are dealing with code, but we are discussing - we are treating it differently and we are discussing about it - how its dependencies and tooling.
And also, it's important for us to know what is the impact of adding this new dependence to our project. So I was looking at different repositories, what they did before the introduction of these actions, and how was it after introducing this action. I can go in more details later if you want to know more about it, but basically we look at this - a lot of different metrics before and after, and we see that there are two interesting things here. First, there is an increase in the number of rejected contributions. So you have, after adding these actions, you can see more rejected pull requests on your project. Is it something that you are expecting? Do you want to reject more? And why you are rejecting more? So it's important to keep it in mind. And also there's a decrease in the number of commits that the merged requests are required to have. So these two things, at least these two impacts, you are going to see in your project. So basically, it is important to keep in mind that we have first one perception and the reality. The perception that we have is that we are adding a new tooling, but actually adopting GitHub Actions is taking a dependency, and then we need to treat it as a new dependency to our to our project. And also, using GitHub Actions might also impact how the community work. So the amount of work that developers need to do for each new pull request, for each new contribution that they want to do in your project, and how they interact. So these two things might be different from what you are expecting when you add a new dependency, so you need to take care. And what I suggest is that you have to measure the difference. So if you want to understand what is going on and what you are going to see in your project, and if you want to understand, if you are not having any unexpected results from these actions, you have to measure what is going on with your projects - with your projects. So for example if you are considering using GitHub Actions and you care about performance - the performance of your code - you need to measure changes in the code. How was it before and how is it after adding these new actions. And if you care about community, how the developers communicate to each other, and how much work they need to do, and how the development workflow changes and how it impacts the developers, then you have to measure the developers' communication and the amount of work and how they are doing it before and after the introduction of these actions. So this is what I want you to show today and if you have any questions I'm happy to answer them. Thank you.
