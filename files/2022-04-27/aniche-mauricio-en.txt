hello everybody my name is mauricio and i'm here to stand up for code coverage today why is that well because i'm pretty sure we all heard stuff like code coverage is useless because it can be tricked or because it forces me to write useless tests or because you know if you write tests without assertions your coverage will be high but your tests will not be testing anything or 100 code coverage it doesn't mean your tests are goods blah blah blah but let me tell you something if you really believe on that it's just because you are not using it properly you know make drop time and that's it no worries there's a way to use code coverage and let's talk about it now um first of all code coverage should be used to augment to improve your test suites and not as something you just have to have right what do i mean by augment the test suites so think of how developers write software so you get some functionality to implement you then start some loop of implementing a little bit of production codes then a little bit of test code it doesn't matter if you do test driven development or not um at some point you're just kind of done and then a big question arises and the question is is this testing enough did i test everything i had to test and this is precisely where code coverage kicks in because you can get the information from it and then how do you do this well you run your code coverage tool you see what you covered what you didn't cover you reflect about it you may write more tests you repeat the cycle and till you feel you're done and when you're done you're done right let me talk a little bit more about this uh how how we how we know we are done right usually the questions i ask myself is um when i look at the line that is not covered for example i ask myself why isn't this covered because when i was writing the tests with the specification in mind um why did i miss this line right maybe there's a reason for that maybe i just forgot about it then i just write the test but maybe it's just because it is something that doesn't really deserve to be tested maybe it's just a getter method that i don't feel like testing right now because you know writing a test for it will not really be a strong test it will never reveal a bug or something right so this is how i answer this is this enough and um the last bullet point there you know this is something you should always avoid you should not write a test just because you know you want to increase your coverage number that's not a good reason to write a test cool so you know code coverage is used to augment your tests uh and what we just saw is also the code coverage should help you taking the decision of writing tests more tests or not but it should not be the one taking the decision for you right you are in control code coverage is just giving you information then the one million dollar question does higher coverage really lead to better software so i never researched code coverage myself but a lot of smart people have done and i'm going to just walk you through some of the papers that i like so for example the first one by hutchins and colleagues from 1994 so a long time ago they compared different test suites with different coverage and they saw the effectiveness of these test suites and the findings are the test suites that achieve over 90 percent coverage are better at detecting faults than the suites that don't achieve that much coverage and that makes sense right the more you coverage the more you cover the more bugs you can find therefore it's just better and another interesting finding that also matches with our perception is that 100 coverage alone is not reliable um it's not enough to indicate if your test suite is good enough so this means if you have 100 coverage that doesn't mean your tests are perfect or something like that then another piece of research from 2009 uh and uh interesting findings as well one of them is if you just keep adding tests by itself this is not an efficient strategy what do you need to do you need to write tests for things you didn't test yet so you look at the coverage and then you write a test for that and these tests will be more likely to find new faults then if you just keep adding tests for things you tested already that makes a lot of sense right and that actually matches with the procedure i just gave you before so you write tests based on the specification when you're implementing your feature once you're done you augment your test suites using coverage

um one more piece of research so in this piece of paper in this work the authors found that coverage is not always related to effectiveness so maybe high coverage doesn't really mean that your your tests are good but the authors conclude that coverage is super good to identify under tested parts of the system right but super bad if you're using this as a quality target so um what what do i get from this is you should never define a coverage target you know if your company has that magical number you should always go for let's say 90 coverage or whatever this is maybe not a very good idea finally um we have all sorts of different coverage criteria line coverage branch coverage condition branch coverage mcdc bad coverage etc etc etc but maybe you don't need all those fancy criteria statement coverage seems to be a very good indicator of how good your tests are right the simplest one statement coverage any tool can calculate that it doesn't really matter the programming language so you don't have to really go for super fancy stuff

basic stuff always works right and i love that

final piece of advice something we also got from these papers is that high coverage may not mean much right 100 coverage doesn't mean your tests are perfect but low coverage means a lot right it means your test suite is weak it may not reveal all the bugs you want to review um shameless self-promotion i just wrote a book on software testing there's an entire chapter about this let me sum up my talk so don't hate code coverage because code coverage doesn't hate you we just have to use it properly how do we do this we use coverage to augment our test suite we use coverage to inform the decision of should i test a little bit more or not but it doesn't take the decision for you and finally high coverage may not mean much but low coverage does mean a lot thank you so much
